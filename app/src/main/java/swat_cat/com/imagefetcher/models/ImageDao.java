package swat_cat.com.imagefetcher.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import swat_cat.com.imagefetcher.models.Image;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IMAGE".
*/
public class ImageDao extends AbstractDao<Image, Long> {

    public static final String TABLENAME = "IMAGE";

    /**
     * Properties of entity Image.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Url = new Property(2, String.class, "url", false, "URL");
        public final static Property ThumbUrl = new Property(3, String.class, "thumbUrl", false, "THUMB_URL");
        public final static Property ImageHeight = new Property(4, Integer.class, "imageHeight", false, "IMAGE_HEIGHT");
        public final static Property ImageWidth = new Property(5, Integer.class, "imageWidth", false, "IMAGE_WIDTH");
        public final static Property ThumbHeight = new Property(6, Integer.class, "thumbHeight", false, "THUMB_HEIGHT");
        public final static Property ThumbWidth = new Property(7, Integer.class, "thumbWidth", false, "THUMB_WIDTH");
        public final static Property Uri = new Property(8, String.class, "Uri", false, "URI");
        public final static Property IsSaved = new Property(9, Boolean.class, "isSaved", false, "IS_SAVED");
    };


    public ImageDao(DaoConfig config) {
        super(config);
    }
    
    public ImageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IMAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"URL\" TEXT," + // 2: url
                "\"THUMB_URL\" TEXT," + // 3: thumbUrl
                "\"IMAGE_HEIGHT\" INTEGER," + // 4: imageHeight
                "\"IMAGE_WIDTH\" INTEGER," + // 5: imageWidth
                "\"THUMB_HEIGHT\" INTEGER," + // 6: thumbHeight
                "\"THUMB_WIDTH\" INTEGER," + // 7: thumbWidth
                "\"URI\" TEXT," + // 8: Uri
                "\"IS_SAVED\" INTEGER);"); // 9: isSaved
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_IMAGE_URI ON IMAGE" +
                " (\"URI\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IMAGE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Image entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(3, url);
        }
 
        String thumbUrl = entity.getThumbUrl();
        if (thumbUrl != null) {
            stmt.bindString(4, thumbUrl);
        }
 
        Integer imageHeight = entity.getImageHeight();
        if (imageHeight != null) {
            stmt.bindLong(5, imageHeight);
        }
 
        Integer imageWidth = entity.getImageWidth();
        if (imageWidth != null) {
            stmt.bindLong(6, imageWidth);
        }
 
        Integer thumbHeight = entity.getThumbHeight();
        if (thumbHeight != null) {
            stmt.bindLong(7, thumbHeight);
        }
 
        Integer thumbWidth = entity.getThumbWidth();
        if (thumbWidth != null) {
            stmt.bindLong(8, thumbWidth);
        }
 
        String Uri = entity.getUri();
        if (Uri != null) {
            stmt.bindString(9, Uri);
        }
 
        Boolean isSaved = entity.getIsSaved();
        if (isSaved != null) {
            stmt.bindLong(10, isSaved ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Image readEntity(Cursor cursor, int offset) {
        Image entity = new Image( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // url
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // thumbUrl
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // imageHeight
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // imageWidth
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // thumbHeight
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // thumbWidth
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Uri
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0 // isSaved
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Image entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setThumbUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImageHeight(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setImageWidth(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setThumbHeight(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setThumbWidth(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setUri(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsSaved(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Image entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Image entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
